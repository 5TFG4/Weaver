"""
Event Models
Structured data models for all event payloads in the system.
Replaces Dict[str, Any] with proper typed classes.
"""

from dataclasses import dataclass, asdict
from typing import Dict, Any, Optional
import time


@dataclass
class SystemEvent:
    """Base class for all system events"""
    timestamp: float
    message: str
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for event publishing"""
        return asdict(self)


@dataclass
class ModuleReadyEvent(SystemEvent):
    """Module ready notification"""
    module: str
    status: str
    strategies_loaded: Optional[int] = None
    platforms: Optional[int] = None
    
    def __init__(self, module: str, status: str, message: str, **kwargs: Any):
        super().__init__(timestamp=time.time(), message=message)
        self.module = module
        self.status = status
        for key, value in kwargs.items():
            setattr(self, key, value)


@dataclass
class ModuleHealthEvent(SystemEvent):
    """Module health status report"""
    module: str
    status: str
    strategies_loaded: Optional[int] = None
    strategies_active: Optional[int] = None
    platforms_connected: Optional[int] = None
    symbols_tracked: Optional[int] = None
    
    def __init__(self, module: str, status: str, message: str, **kwargs: Any):
        super().__init__(timestamp=time.time(), message=message)
        self.module = module
        self.status = status
        for key, value in kwargs.items():
            setattr(self, key, value)


@dataclass
class PlatformRequestEvent:
    """Trading platform availability request"""
    module: str
    request_id: str
    timestamp: float
    
    def __init__(self, module: str, request_id: str):
        self.module = module
        self.request_id = request_id
        self.timestamp = time.time()
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


@dataclass
class MarketDataRequestEvent:
    """Market data request"""
    symbol: str
    data_type: str
    module: str
    request_id: str
    timestamp: float
    
    def __init__(self, symbol: str, data_type: str, module: str, request_id: str):
        self.symbol = symbol
        self.data_type = data_type
        self.module = module
        self.request_id = request_id
        self.timestamp = time.time()
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


@dataclass
class TradeSignalEvent:
    """Trading signal generated by strategy"""
    action: str  # buy/sell
    symbol: str
    quantity: int
    reason: str
    strategy: str
    timestamp: float
    
    def __init__(self, action: str, symbol: str, quantity: int, reason: str, strategy: str):
        self.action = action
        self.symbol = symbol
        self.quantity = quantity
        self.reason = reason
        self.strategy = strategy
        self.timestamp = time.time()
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)


@dataclass
class ModuleShutdownEvent:
    """Module shutdown notification"""
    module: str
    message: str
    timestamp: float
    
    def __init__(self, module: str, message: str):
        self.module = module
        self.message = message
        self.timestamp = time.time()
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)
